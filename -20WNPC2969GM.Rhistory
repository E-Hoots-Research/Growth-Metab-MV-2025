geom_point(data = ds1, aes(x = log_mass, y = MMR, group = factor(Temp_class), color = factor(Temp_class)),
alpha = 0.3, position = position_jitter(width = 0.1)) +
geom_point(data = pred_MMR, aes(x = x, y = predicted, color = group, group = group),
size = 3) +
geom_line(data = pred_MMR, aes(x = x, y = predicted, color = group, group = group),
size = 2) +
labs(x = "log_mass_centre", y = "Predicted MMR", color = "Temp_class") +
theme_bw() +
scale_color_manual(values = c("#78B7C5", "#F21A00")) +
scale_y_log10()
# F test on interaction effect
anova(MMR_mod, type = "3")
# Generate fitted data
z_MMR<-augment(MMR_mod)                             # get variables and fitted values from model
head(z_MMR)
z_MMR <- z_MMR %>%
mutate(
pwr.fitted = 10^(.fitted)
)
# check assumptions: plot all residual values against the fitted
ggplot(z_MMR, aes(x = .fitted, y = .resid)) +       # same plot as before
geom_point(size = 2)
ggplot(z_MMR, aes(x = log_mass, y = MMR, group = ID_fish)) +
geom_line(aes(y = pwr.fitted, color = `as.factor(Temp_class)`),
alpha = 0.6) +
theme_bw() +
scale_y_log10()+
scale_color_manual(values  = c("#78B7C5", "#F21A00"))
### FIG. 2 ###
fig2.1 <- ggplot() +
geom_ribbon(data = pred_SMR, aes(x=x, ymin = conf.low, ymax = conf.high, fill = group, color = group, group = group), width = 0.2, alpha = 0.1) +   # add error bars showing 95% confidence intervals
geom_line(data = pred_SMR, aes(x = x, y = predicted, color = group, group = group),
size = 1) +
geom_point(data = ds1, aes(x = log_mass, y = SMR, group = factor(Temp_class), color = factor(Temp_class)),
alpha = 0.25, position = position_jitter(width = 0.1)) +
labs(x = "log10(mass (g))", y = expression(SMR~(mg~O[2]~h^-1)), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00")) +
scale_fill_manual(values = c("#78B7C5", "#F21A00"), guide = "none") +
xlim(-0.25, 1.1) +
scale_y_log10(limits = c(0.15, 1.6))
fig2.2 <- ggplot() +
geom_ribbon(data = pred_RMR, aes(x=x, ymin = conf.low, ymax = conf.high, fill = group, color = group, group = group), width = 0.2, alpha = 0.1) +   # add error bars showing 95% confidence intervals
geom_line(data = pred_RMR, aes(x = x, y = predicted, color = group, group = group),
size = 1) +
geom_point(data = ds1, aes(x = log_mass, y = RMR, group = factor(Temp_class), color = factor(Temp_class)),
alpha = 0.25, position = position_jitter(width = 0.1)) +
labs(x = "log10(mass (g))", y = expression(RMR~(mg~O[2]~h^-1)), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00")) +
scale_fill_manual(values = c("#78B7C5", "#F21A00"), guide = "none") +
xlim(-0.25, 1.1) +
scale_y_log10(limits=c(0.25,2.1))
fig2.3 <- ggplot() +
geom_ribbon(data = pred_MMR, aes(x=x, ymin = conf.low, ymax = conf.high, fill = group, color = group, group = group), width = 0.2, alpha = 0.1) +   # add error bars showing 95% confidence intervals
geom_line(data = pred_MMR, aes(x = x, y = predicted, color = group, group = group),
size = 1) +
geom_point(data = ds1, aes(x = log_mass, y = MMR, group = factor(Temp_class), color = factor(Temp_class)),
alpha = 0.25, position = position_jitter(width = 0.1)) +
labs(x = expression(log[10]~(mass~(g))), y = expression(MMR~(mg~O[2]~h^-1)), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00")) +
scale_fill_manual(values = c("#78B7C5", "#F21A00"), guide = "none") +
xlim(-0.25, 1.1) +
scale_y_log10(limits=c(0.5, 5))
fig2.4 <- ggplot(z_SMR, aes(x = log_mass, y = SMR, group = ID_fish)) +
geom_line(aes(y = pwr.fitted, color = `as.factor(Temp_class)`),      # note this will look odd if there are additional fixed effects
alpha = 0.6) +
theme_classic() +
scale_color_manual(values  = c("#78B7C5", "#F21A00")) +
scale_y_log10(limits = c(0.15, 1.6))+
xlim(-0.25, 1.1) +
labs(x = expression(log[10]~(mass~(g))), y = expression(Fitted~SMR~(mg~O[2]~h^-1)), color = expression("Temperature ("*degree*C*")"))
fig2.5 <- ggplot(z_RMR, aes(x = log_mass, y = RMR, group = ID_fish)) +
geom_line(aes(y = pwr.fitted, color = `as.factor(Temp_class)`),      # note this will look odd if there are additional fixed effects
alpha = 0.6) +
theme_classic() +
scale_color_manual(values  = c("#78B7C5", "#F21A00")) +
scale_y_log10(limits=c(0.25,2.1))+
xlim(-0.25, 1.1) +
labs(x = expression(log[10]~(mass~(g))), y = expression(Fitted~RMR~(mg~O[2]~h^-1)), color = expression("Temperature ("*degree*C*")"))
fig2.6 <- ggplot(z_MMR, aes(x = log_mass, y = MMR, group = ID_fish)) +
geom_line(aes(y = pwr.fitted, color = `as.factor(Temp_class)`),      # note this will look odd if there are additional fixed effects
alpha = 0.6) +
theme_classic() +
scale_color_manual(values  = c("#78B7C5", "#F21A00")) +
scale_y_log10(limits=c(0.5, 5))+
xlim(-0.25, 1.1) +
labs(x = expression(log[10]~(mass~(g))), y = expression(Fitted~MMR~(mg~O[2]~h^-1)), color = expression("Temperature ("*degree*C*")"))
library(ggpubr)
fig2 <- ggarrange(print(fig2.1 + rremove("xlab")),
print(fig2.2 + rremove("xlab")),
print(fig2.3 + rremove("xlab")),
print(fig2.4 + rremove("xlab") + rremove("ylab")),
print(fig2.5 + rremove("xlab") + rremove("ylab")),
print(fig2.6 + rremove("xlab") + rremove("ylab")),
ncol = 3, nrow = 2, widths = c(5, 5, 5),
align = "v",
common.legend = TRUE,
legend = "right")
require(grid)
annotate_figure(fig2, bottom = textGrob(expression(log[10]~(mass~(g))), gp = gpar(cex = 1.1)))
setwd(figures_wd)
jpeg(file = "Fig2.jpeg", width = 1440, height=960, units = "px")
annotate_figure(fig2, bottom = textGrob(expression(log[10]~(mass~(g))), gp = gpar(cex = 1.1)))
dev.off()
#subset ds1 to only include fish for which fat mass was measured
ds_fat <- ds1[which(!is.na(ds1$log_fatmass)),]
fat_mod <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + Sex + Density, data=ds_fat)
fat_mod1 <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + SMR:Temp_class + Sex + Density, data=ds_fat)
fat_mod2 <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + RMR:Temp_class + Sex + Density, data=ds_fat)
fat_mod3 <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + MMR:Temp_class + Sex + Density, data=ds_fat)
summary(fat_mod)   # generate model output
fat_mod1 <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + SMR:Temp_class + Sex + Density, data=ds_fat)
fat_mod2 <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + RMR:Temp_class + Sex + Density, data=ds_fat)
fat_mod3 <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + MMR:Temp_class + Sex + Density, data=ds_fat)
summary(fat_mod)   # generate model output
plot(fat_mod)      # residuals plot
summary(fat_mod1)   # generate model output
plot(fat_mod)      # residuals plot
summary(fat_mod2)   # generate model output
plot(fat_mod)      # residuals plot
summary(fat_mod3)   # generate model output
plot(fat_mod)      # residuals plot
pred_fat <- ggpredict(fat_mod, terms = c("log_finalmass_centre", "Temp_class"))
# Plot the raw data
ggplot() +
geom_point(data = ds_fat, aes(x = log_finalmass_centre, y = log_fatmass, group = factor(Temp_class), color = factor(Temp_class))) +
geom_line(data = pred_fat, aes(x = x, y = predicted, color = group, group = group)) +
labs(x = expression(log[10]~(centred~mass~(g))), y = expression(log[10]~(fat~mass~(g))), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00"))
ggplot(data = ds_fat, aes(y = Fat_mass_g, x = Sex, fill = factor(Sex))) +
scale_fill_manual(values = c("red3","blue3", "yellow3")) +
geom_boxplot() +
labs(x = "Sex", y = "Fat mass (g)") +
theme_classic()
ggplot(data = ds_fat, aes(y = Fat_mass_g, x = Sex, fill = factor(Sex))) +
scale_fill_manual(values = c("red3","blue3", "yellow3")) +
geom_boxplot() +
labs(x = "Sex", y = "Fat mass (g)") +
theme_classic()
# Plot the raw data
ggplot() +
geom_point(data = ds_fat, aes(x = log_finalmass_centre, y = log_fatmass, group = factor(Temp_class), color = factor(Temp_class))) +
geom_line(data = pred_fat, aes(x = x, y = predicted, color = group, group = group)) +
labs(x = expression(log[10]~(centred~mass~(g))), y = expression(log[10]~(fat~mass~(g))), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00"))
# Plot the raw data
ggplot() +
geom_point(data = ds_fat, aes(x = log_finalmass_centre, y = log_fatmass, group = factor(Temp_class), color = factor(Temp_class))) +
geom_line(data = pred_fat, aes(x = x, y = predicted, color = group, group = group)) +
facet_grid(.~factor(Sex)) +
labs(x = expression(log[10]~(centred~mass~(g))), y = expression(log[10]~(fat~mass~(g))), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00"))
# F test on interaction term
anova(fat_mod)
fat_mod <- lm(log_fatmass ~ Temp_class + log_finalmass_centre:Temp_class + Sex + Density, data=ds_fat)
summary(fat_mod)   # generate model output
# F test on interaction term
anova(fat_mod)
# Plot the raw data
ggplot() +
geom_point(data = ds_fat, aes(x = log_finalmass_centre, y = log_fatmass, group = factor(Temp_class), color = factor(Temp_class))) +
geom_line(data = pred_fat, aes(x = x, y = predicted, color = group, group = group)) +
facet_grid(.~factor(Sex)) +
labs(x = expression(log[10]~(centred~mass~(g))), y = expression(log[10]~(fat~mass~(g))), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00"))
# Plot the raw data
ggplot() +
geom_point(data = ds_fat, aes(x = log_finalmass_centre, y = log_fatmass, group = factor(Temp_class), color = factor(Temp_class))) +
geom_line(data = pred_fat, aes(x = x, y = predicted, color = group, group = group)) +
labs(x = expression(log[10]~(centred~mass~(g))), y = expression(log[10]~(fat~mass~(g))), color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
scale_color_manual(values = c("#78B7C5", "#F21A00"))
# KNIT SETTINGS
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# installs and loads packages, need to install "pacman" first
pacman::p_load("brms",
"broom",
"broom.mixed",
"car",
"coda",
"dplyr",
"ggeffects",
"ggiraphExtra",
"ggplot2",
"ggpubr",
"hms",
"lme4",
"lmerTest",
"lubridate",
"nlme",
"posterior",
"readxl",
"tidyverse"
)
wd <- getwd() # getwd tells us what the current wd is, we are using this to drop it in a variable called wd
raw_data_wd <- paste0(wd, "./00_raw_data")  # creates a variable with the name of the wd where raw data are stored
MRcalcs_wd <- paste0(raw_data_wd, "./MRcalcs")
MR_slopes_wd <- paste0(raw_data_wd, "./MR_Slopes")
MMR_wd <- paste0(raw_data_wd, "./MMR")
metadata_wd <- paste0(wd, "./01_metadata")  # creates a variable with the name of the wd where metadata are stored
figures_wd <- paste0(wd, "./03_figures")  # creates a variable with the name of the wd where figures are to be stored
#calcSMR function adapted from Chabot, 2016 (https://doi.org/10.1111/jfb.12845)
#note that we have not used the mlnd function as the mean of the lowest 10th percentile was better suited to our data
calcSMR <- function(Y) {
u <- sort(Y)
tenpc <- round(0.1 * length(u))
SD10pc <- sd(u[1:tenpc])
low10pc = mean(u[(which((u > (mean(u[1:tenpc])-SD10pc)))):(tenpc+which((u > (mean(u[1:tenpc])-SD10pc -u[1]))))])
return(list(low10pc = low10pc))
}
# Define a function to extract date strings from file names
extract_date <- function(files) {
gsub(".*?([0-9]{8}).*", "\\1", basename(files))
}
# Specify the directories where your files are located
csv_folder <- MR_slopes_wd
xlsx_folder <- MMR_wd
# Get the list of files in each folder
csv_files <- list.files(csv_folder, pattern = "_MR_slopes.csv", full.names = TRUE)
xlsx_files <- list.files(xlsx_folder, pattern = "_MMR.xlsx", full.names = TRUE)
# Extract date strings from file names
csv_dates <- extract_date(csv_files)
xlsx_dates <- extract_date(xlsx_files)
matching_files <- Map(function(date) {
csv_file <- csv_files[grep(date, csv_dates)]
xlsx_file <- xlsx_files[grep(date, xlsx_dates)]
return(list(csv = csv_file, xlsx = xlsx_file))
}, unique(c(csv_dates, xlsx_dates)))
# Loop through matching files and perform your data processing
for (i in seq_along(matching_files)) {
date <- unique(csv_dates)[i]
current_files <- matching_files[[i]]  # Renamed 'files' to 'current_files'
# Process CSV data
tb_respirometry <- read_csv(current_files$csv) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
length     = Length,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
)
tb_respirometry <- tb_respirometry %>%
mutate(
volume_net = volume_ch - mass,
MR_wBR     = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = BRSlope*(volume_ch/1000)*60*60,
MR         = MR_wBR + BR,
BR_perc    = (BR/MR_wBR)*100
)
#Calculate RMR and variance in MR for each fish, create a new table for individual RMR calcs
tb_rmr <- tb_respirometry %>%
group_by(chamber_ch) %>%
arrange(chamber_ch, dateTime) %>%
slice(3:(n() - 1)) %>%
ungroup()  %>%
group_by(
ID_fish, mass, length, volume_net, chamber_ch, Temp_class
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
RMR        = mean(MR),
RMR_var    = var(MR),
RMR_perc   = (RMR_var/RMR)*100,
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
#Calculate SMR for each fish, create a new table for individual SMR calcs
tb_smr <-
tb_respirometry %>%
group_by(
ID_fish, mass,length, volume_net, chamber_ch
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
SMR        = calcSMR(MR)$low10pc %>% unname(),
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
# Process XLSX data
tb_mmr <- read_excel(current_files$xlsx) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
) %>%
drop_na()
tb_mmr <- tb_mmr %>%
mutate(
volume_net = volume_ch - mass,
MMR_wBR    = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = abs(BRSlope)*(volume_ch/1000)*60*60,
MMR        = MMR_wBR - BR,
BR_perc    = (BR/MMR_wBR)*100
) %>%
arrange(ID_fish)
# Combine the processed data
# Combine the processed data, selecting only specific columns
tb_MR_master <- tb_rmr %>%
left_join(select(tb_smr, ID_fish, SMR), by = "ID_fish") %>%
left_join(select(tb_mmr, ID_fish, MMR), by = "ID_fish") %>%
select(-matches(".x$")) %>%
rename_with(~gsub("\\.y$", "", .), matches(".y$"))
# Export data
setwd(MRcalcs_wd)
write.csv(tb_MR_master, file = paste0(date, "_MRcalcs.csv"), col.names = NA, row.names = FALSE)
}
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
file.list <- list.files(MRcalcs_wd)
setwd(MRcalcs_wd)
calcs_all <- lapply(file.list, read_csv)
tb_MRcalcs <- bind_rows(calcs_all, .id="Resp_Day") %>%
mutate(
log_SMR_low10pc = log10(SMR),
log_mass = log10(mass),
log_RMR = log10(RMR),
log_MMR = log10(MMR),
Resp_Day = as.numeric(Resp_Day)
)
# KNIT SETTINGS
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# installs and loads packages, need to install "pacman" first
pacman::p_load("brms",
"broom",
"broom.mixed",
"car",
"coda",
"dplyr",
"ggeffects",
"ggiraphExtra",
"ggplot2",
"ggpubr",
"hms",
"lme4",
"lmerTest",
"lubridate",
"nlme",
"posterior",
"readxl",
"tidyverse"
)
wd <- getwd() # getwd tells us what the current wd is, we are using this to drop it in a variable called wd
raw_data_wd <- paste0(wd, "./00_raw_data")  # creates a variable with the name of the wd where raw data are stored
MRcalcs_wd <- paste0(raw_data_wd, "./MRcalcs")
MR_slopes_wd <- paste0(raw_data_wd, "./MR_Slopes")
MMR_wd <- paste0(raw_data_wd, "./MMR")
metadata_wd <- paste0(wd, "./01_metadata")  # creates a variable with the name of the wd where metadata are stored
figures_wd <- paste0(wd, "./03_figures")  # creates a variable with the name of the wd where figures are to be stored
#calcSMR function adapted from Chabot, 2016 (https://doi.org/10.1111/jfb.12845)
#note that we have not used the mlnd function as the mean of the lowest 10th percentile was better suited to our data
calcSMR <- function(Y) {
u <- sort(Y)
tenpc <- round(0.1 * length(u))
SD10pc <- sd(u[1:tenpc])
low10pc = mean(u[(which((u > (mean(u[1:tenpc])-SD10pc)))):(tenpc+which((u > (mean(u[1:tenpc])-SD10pc -u[1]))))])
return(list(low10pc = low10pc))
}
# Define a function to extract date strings from file names
extract_date <- function(files) {
gsub(".*?([0-9]{8}).*", "\\1", basename(files))
}
# Specify the directories where your files are located
csv_folder <- MR_slopes_wd
xlsx_folder <- MMR_wd
# Get the list of files in each folder
csv_files <- list.files(csv_folder, pattern = "_MR_slopes.csv", full.names = TRUE)
xlsx_files <- list.files(xlsx_folder, pattern = "_MMR.xlsx", full.names = TRUE)
# Extract date strings from file names
csv_dates <- extract_date(csv_files)
xlsx_dates <- extract_date(xlsx_files)
matching_files <- Map(function(date) {
csv_file <- csv_files[grep(date, csv_dates)]
xlsx_file <- xlsx_files[grep(date, xlsx_dates)]
return(list(csv = csv_file, xlsx = xlsx_file))
}, unique(c(csv_dates, xlsx_dates)))
# Loop through matching files and perform your data processing
for (i in seq_along(matching_files)) {
date <- unique(csv_dates)[i]
current_files <- matching_files[[i]]  # Renamed 'files' to 'current_files'
# Process CSV data
tb_respirometry <- read_csv(current_files$csv) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
length     = Length,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
)
tb_respirometry <- tb_respirometry %>%
mutate(
volume_net = volume_ch - mass,
MR_wBR     = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = BRSlope*(volume_ch/1000)*60*60,
MR         = MR_wBR + BR,
BR_perc    = (BR/MR_wBR)*100
)
#Calculate RMR and variance in MR for each fish, create a new table for individual RMR calcs
tb_rmr <- tb_respirometry %>%
group_by(chamber_ch) %>%
arrange(chamber_ch, dateTime) %>%
slice(3:(n() - 1)) %>%
ungroup()  %>%
group_by(
ID_fish, mass, length, volume_net, chamber_ch, Temp_class
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
RMR        = mean(MR),
RMR_var    = var(MR),
RMR_perc   = (RMR_var/RMR)*100,
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
#Calculate SMR for each fish, create a new table for individual SMR calcs
tb_smr <-
tb_respirometry %>%
group_by(
ID_fish, mass,length, volume_net, chamber_ch
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
SMR        = calcSMR(MR)$low10pc %>% unname(),
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
# Process XLSX data
tb_mmr <- read_excel(current_files$xlsx) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
) %>%
drop_na()
tb_mmr <- tb_mmr %>%
mutate(
volume_net = volume_ch - mass,
MMR_wBR    = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = abs(BRSlope)*(volume_ch/1000)*60*60,
MMR        = MMR_wBR - BR,
BR_perc    = (BR/MMR_wBR)*100
) %>%
arrange(ID_fish)
# Combine the processed data
# Combine the processed data, selecting only specific columns
tb_MR_master <- tb_rmr %>%
left_join(select(tb_smr, ID_fish, SMR), by = "ID_fish") %>%
left_join(select(tb_mmr, ID_fish, MMR), by = "ID_fish") %>%
select(-matches(".x$")) %>%
rename_with(~gsub("\\.y$", "", .), matches(".y$"))
# Export data
setwd(MRcalcs_wd)
write.csv(tb_MR_master, file = paste0(date, "_MRcalcs.csv"), col.names = NA, row.names = FALSE)
}
