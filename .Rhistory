summarise(
RMR        = mean(MR),
RMR_var    = var(MR),
RMR_perc   = (RMR_var/RMR)*100,
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
#Calculate SMR for each fish, create a new table for individual SMR calcs
tb_smr <-
tb_respirometry %>%
group_by(
ID_fish, mass,length, volume_net, chamber_ch
) %>%
arrange(ID_fish) %>%
drop_na() %>%
summarise(
SMR        = calcSMR(MR)$low10pc %>% unname(),
time_start = dateTime %>% min(),
time_end   = dateTime %>% max()
)
# Process XLSX data
tb_mmr <- read_excel(current_files$xlsx) %>%
rename(
chamber_ch = Chamber.No,
ID_fish    = Ind,
mass       = Mass,
volume_ch  = Ch.Volume,
DOunit     = DO.unit,
dateTime   = Date.Time,
Temp_class = Temp.class,
slope_wBR  = Slope.with.BR,
BRSlope    = BR.Slope
)  %>%
mutate(
dateTime       = as.POSIXct(ymd_hms(dateTime)),
Time           = as_hms(ymd_hms(dateTime)),
Date           = as.Date(dateTime, format = "%Y/%m/%d"),
) %>%
drop_na()
tb_mmr <- tb_mmr %>%
mutate(
volume_net = volume_ch - mass,
MMR_wBR    = abs(slope_wBR)*(volume_net/1000)*60*60, #uncomment for mgO2/hr instead
BR         = abs(BRSlope)*(volume_ch/1000)*60*60,
MMR        = MMR_wBR - BR,
BR_perc    = (BR/MMR_wBR)*100
) %>%
arrange(ID_fish)
# Combine the processed data
# Combine the processed data, selecting only specific columns
tb_MR_master <- tb_rmr %>%
left_join(select(tb_smr, ID_fish, SMR), by = "ID_fish") %>%
left_join(select(tb_mmr, ID_fish, MMR), by = "ID_fish") %>%
select(-matches(".x$")) %>%
rename_with(~gsub("\\.y$", "", .), matches(".y$"))
# Export data
setwd(MRcalcs_wd)
write.csv(tb_MR_master, file = paste0(date, "_MRcalcs.csv"), col.names = NA, row.names = FALSE)
}
# read all "_MRcalcs.csv" files, bind into one table, and add columns with logged values
file.list <- list.files(MRcalcs_wd)
setwd(MRcalcs_wd)
calcs_all <- lapply(file.list, read_csv)
tb_MRcalcs <- bind_rows(calcs_all, .id="Resp_Day") %>%
mutate(
log_SMR_low10pc = log10(SMR),
log_mass = log10(mass),
log_RMR = log10(RMR),
log_MMR = log10(MMR),
Resp_Day = as.numeric(Resp_Day)
)
# assign Month category to all timepoints
tb_MRcalcs$Month <- cut(
tb_MRcalcs$Resp_Day,
breaks = c(0, 13, seq(23, max(tb_MRcalcs$Resp_Day) + 10, by = 10)),
right = FALSE,
labels = c("April", "May", "June", "July", "August", "September")
)
setwd(raw_data_wd)
biometrics <- read.csv("FinalBiometrics.csv")
ds <- left_join(tb_MRcalcs, biometrics, by = c("ID_fish")) #a table with all resp data and metadata collected in dissection
ds1 <- ds[which(ds$Month != "April"),] # remove April data from analysis due to temperature inconsistency
ds1 <- ds1 %>%
# Filter to keep only ID_fish where a mass exists for Month == "May"
filter(ID_fish %in% ID_fish[Month == "May" & !is.na(mass)])
month_order <- c("May", "June", "July", "August", "September") # assign chronological order to Month (otherwise alphabetical)
ds1$Month <- factor(ds1$Month, levels = month_order) # assign month_order to factor variable "Month" in ds1
month_order_pop <- c("April", "May", "June", "July", "August", "September") # assign chronological order to Month (otherwise alphabetical)
min_mass = min(ds1$mass)
min_log_mass = min(ds1$log_mass)
min_finalmass = min(((ds1[which(!is.na(ds1$Final_Mass_g)),]$Final_Mass_g)))
min_log_finalmass = min((log10(ds1[which(!is.na(ds1$Final_Mass_g)),]$Final_Mass_g)))
# format data columns and generate centred and log-scaled variables
ds1 <- ds1 %>%
mutate(
mass_centre = mass - min_mass,                                  # centred mass
log_mass_centre = log_mass - log10(min_mass),                   # log-scaled centred mass
Temp_class = as.factor(Temp_class),                             # set temperature treatments as factors
SMR1 = log10(SMR),                                              # log-scaled SMR
RMR1 = log10(RMR),                                              # log-scaled RMR
MMR1 = log10(MMR),                                              # log-scaled MMR
mass1 = log_mass,                                               # log-scaled mass
Month_int = case_when(Month == "May" ~ 1,
Month == "June" ~ 2,
Month == "July" ~ 3,
Month == "August" ~ 4,
Month == "September" ~ 5),
Month_centred = Month_int - 1,                                  # left-centred mass so May is the intercept
Month_centred_factor = as.factor(Month_centred),                # set centred month as factors
Rack = as.integer(Rack),                                        # set rack ID to integer (for now)
Bin = as.integer(Bin),                                          # set bin ID to integer (for now)
finalmass_centre = Final_Mass_g - min_finalmass,                # centre last mass measurement taken
log_finalmass_centre = log10(Final_Mass_g) - min_log_finalmass, # log-scaled and centred final mass
log_fatmass = log10(Fat_mass_g)                                 # log-scaled fat mass
)
ds1 <- tidyr::unite(data = ds1, Rack, Bin, col = "tankID", sep = "_") # merge rack and bin data into one identifier, call it tankID
#read in density data table, call it BinCounts
setwd(raw_data_wd)
BinCounts <- read_excel("BinCounts.xlsx", sheet = "data")
tb_density <- BinCounts %>%
group_by_(
"Month",
"Rack") %>%
summarise(
Population = sum(Population_tagged)) %>%
mutate(
Month = factor(Month, levels = month_order_pop))
ggplot(BinCounts, aes(x = factor(Month, levels = month_order_pop), y = Population_tagged, group = tankID, color = factor(tankID))) +
geom_line() +
geom_point() +
geom_jitter(height = 0.1, width = 0.25) +
facet_grid(.~Rack) +
theme_classic()
#merge BinCounts and ds1
ds1 <- left_join(ds1, BinCounts %>% dplyr::select("Month", "tankID", "Population"), by = c("Month", "tankID"))
#reformat Sex variable so that both unknown and immature fish are "NA"
ds1$Sex <- ifelse(ds1$Sex == "I", NA, ds1$Sex)
# rename "population" as density, set tankID as factor
ds1 <- ds1 %>%
rename(
Density = Population
) %>%
mutate(
tankID = as.factor(tankID)
)
# check structure of ds1
str(ds1)
head(ds1)
# check sex ratio of population
tb_sexratio <- ds1[which(ds1$Month == "September"),] %>%
group_by_(
"Temp_class",
"Sex"
) %>%
count()
sexorder <- c("Immature", "Female", "Male")
tb_sexratio$Sex <- as.character(tb_sexratio$Sex)
tb_sexratio$Sex[tb_sexratio$Sex==""] <- NA
tb_sexratio$Sex[is.na(tb_sexratio$Sex)] <- "Immature"
tb_sexratio$Sex[tb_sexratio$Sex == "F"] <- "Female"
tb_sexratio$Sex[tb_sexratio$Sex == "M"] <- "Male"
tb_sexratio <- tb_sexratio %>%
mutate(
Sex = factor(Sex, levels = sexorder))
fig3b1 <- ggplot(tb_sexratio, aes(x = " ", y = n,  fill = Sex)) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual(values = c("gold3", "darkgreen", "purple")) +
labs(x = "Whole Population", y = "Count (absolute)", fill = "Sex") +
theme_classic()
fig3b2 <- ggplot(tb_sexratio, aes(x = factor(Temp_class), y = n, fill = Sex)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = c("gold3", "darkgreen", "purple")) +
labs(x = expression("Temperature ("*degree*C*")"), y = "Proportion", fill = "Sex") +
theme_classic()
fig3b <- ggarrange(print(fig3b1), print(fig3b2), ncol = 2, nrow = 1, widths = c(1, 2), align = "v", common.legend = TRUE, legend = "right")
fig3b
hist(ds1$mass) # plot all mass values to see mass range and most frequent values
ds1$Month <- factor(ds1$Month, levels = month_order)              # reassign month_order to factor variable "Month" in ds1
ds1$Sex[ds1$Sex == ""] <- NA
ds1$Sex <- factor(ds1$Sex)
# Plot mass over time, connect by ID_fish to show individual trends
ggplot(ds1, aes(x = Month, y = mass, group = ID_fish)) +          # plot raw data by ID
geom_point(size = 2) +                                          # size of data points
geom_line() +                                                   # connect points by individual ID
facet_wrap(. ~ Temp_class) +                                    # produces one plot per temperature treatment
theme_bw()
ggplot(ds1, aes(x = Month_int, y = log_mass, group = ID_fish)) +  # plot logged mass data by ID
geom_point(size = 2) +                                          # size of data points
geom_line() +                                                   # connect points by individual ID
facet_wrap(. ~ Temp_class) +                                    # produces one plot per temperature treatment
theme_bw() +
scale_x_log10()                                                 # display x-axis on log scale
ds18 <- ds1[which(ds1$Temp_class == "18"),]                   # subset ds for only fish at 18C
ds23 <- ds1[which(ds1$Temp_class == "23"),]                   # subset ds for only fish at 23C
mass18_mod<-lme4::lmer(log_mass ~ Month + (1 + Month_int|ID_fish), # model structure, 18C only
data=ds18, REML = T)
summary(mass18_mod)                                 # generate model output
plot(mass18_mod)                                    # residuals plot
mass23_mod<-lme4::lmer(log_mass ~ Month + (1 + Month_int|ID_fish), # model structure, 23C only
data=ds23, REML=T)
summary(mass23_mod)                                 # generate model output
plot(mass23_mod)                                    # residuals plot
# mass model including both temperature treatments, and their interaction with Month
mass_mod <- lmer(log_mass ~ Month*as.factor(Temp_class) + Sex  + Density + (1 + Month_int|ID_fish),
data=ds1, REML=T)
summary(mass_mod)   # generate model output
plot(mass_mod)      # residuals plot
ranova(mass_mod)    # ANOVA table output to test random effects
# mass model including both temperature treatments, and their interaction with Month
mass_mod_noMonth <- lmer(log_mass ~ Month*as.factor(Temp_class) + Sex + Density + (1|ID_fish),
data=ds1, REML=T)
summary(mass_mod_noMonth)   # generate model output
plot(mass_mod_noMonth)      # residuals plot
ranova(mass_mod_noMonth)    # ANOVA table output to test random effects
# mass model with random intercepts by temp treatment
mass_mod_trtint <- lmer(log_mass ~ Month*as.factor(Temp_class) + Sex + Density + (0 + Month_int|Temp_class),
data=ds1, REML=T)
summary(mass_mod_trtint)   # generate model output
plot(mass_mod_trtint)      # residuals plot
ranova(mass_mod_trtint)    # ANOVA table output to test random effects
mass_mod_sex <- lmer(log_mass ~ Sex*as.factor(Temp_class) + Sex*as.factor(Temp_class)*Month + (1 + Month_int|ID_fish),
data=ds1, REML=T)
summary(mass_mod_sex)
plot(mass_mod_sex)
ranova(mass_mod_sex)
pred <- ggpredict(mass_mod, terms = c("Month", "Temp_class")) # generate trend lines for the two temperature treatments
ggplot() +
geom_errorbar(
data = pred,
aes(x=x, ymin = conf.low, ymax = conf.high, color = group, group = group), width = 0.2) +   # add 95% confidence interval bars
geom_point(
data = pred,
aes(x = x, y = predicted, color = group, group = group)) +                                    # predicted level by temp*month
geom_line(
data = pred,
aes(x = x, y = predicted, color = group, group = group)) +                                    # show level trend over time
labs(
x = "Month",
y = "Predicted log_mass",
color = "Temp_class") +
theme_bw() +
scale_color_manual(values = c("#78B7C5", "#F21A00"))
anova(mass_mod, type = "3") # type 3 anova because we expect a meaningful interaction
z_mass<-augment(mass_mod)                             # get variables and fitted values from model
head(z_mass)
##### check assumptions: plot all residual values against the fitted
ggplot(z_mass, aes(x = .fitted, y = .resid)) +   # same plot as before
geom_point(size = 2)
fig1.1 <- ggplot(z_mass, aes(x = Month, y = log_mass, group = ID_fish)) +
geom_line(aes(y = .fitted, color = `as.factor(Temp_class)`),             # note this will look odd if there are additional fixed effects
alpha = 0.6) +
theme_classic() +
labs(x = "Month", y = expression(log[10]~(mass~(g))), color = expression("Temperature ("*degree*C*")")) +
ylim(-0.24,1) +
scale_color_manual(values  = c("#78B7C5", "#F21A00"))
fig1.2 <- ggplot() +
geom_errorbar(
data = pred,
aes(x=x, ymin = conf.low, ymax = conf.high, color = group, group = group), width = 0.2, alpha = 0.3) +      # add 95% confidence interval bars
geom_line(
data = pred,
aes(x = x, y = predicted, color = group, group = group),
size = 1) +
labs(
x = "Month",
y = expression(log[10]~(mass~(g))),
color = expression("Temperature ("*degree*C*")")) +
theme_classic() +
ylim(-0.24,1) +
scale_color_manual(values = c("#78B7C5", "#F21A00"))
fig1 <- ggarrange(print(fig1.1 + rremove("xlab") + rremove ("ylab")),
print(fig1.2 + rremove("xlab") + rremove ("ylab")),
ncol = 2, nrow = 1, widths = c(1, 1.1),
align = "v",
common.legend = TRUE,
legend = "right")
require(grid)
jpeg(file = "Fig1.jpeg", width=960, height=480, units = "px")
annotate_figure(
fig1,
bottom = textGrob("Month"),
left = textGrob(
expression(log[10]~(mass~(g))),
rot = 90,          # Rotate the y-axis label 90 degrees
gp = gpar(fontsize = 12)  # Optionally adjust the font size
)
)
setwd(figures_wd)
jpeg(file = "Fig1.jpeg", width=960, height=480, units = "px")
annotate_figure(
fig1,
bottom = textGrob("Month"),
left = textGrob(
expression(log[10]~(mass~(g))),
rot = 90,          # Rotate the y-axis label 90 degrees
gp = gpar(fontsize = 12)  # Optionally adjust the font size
)
)
dev.off()
hist(ds1$SMR)        # plot all raw SMR values in a histogram, note skewness
hist(log10(ds1$SMR)) # plot all log-SMR values in a histogram
ggplot(ds1, aes(x = mass, y = SMR, group = ID_fish)) +          # plot raw SMR data by ID against mass
geom_point(size = 2) +                                        # size of data points
facet_wrap(. ~ Temp_class) +                                  # produces one plot per temperature treatment
theme_bw()
ggplot(ds1, aes(x = log_mass, y = SMR, group = ID_fish)) +          # plot raw SMR data by ID against log10(mass)
geom_point(size = 2) +                                            # size of data points
facet_wrap(. ~ Temp_class) +                                      # produces one plot per temperature treatment
theme_bw()
ggplot(ds1, aes(x = log_mass, y = SMR, group = ID_fish)) +          # plot raw SMR data by ID against log10(mass)
geom_point(size = 2) +                                            # size of data points
facet_wrap(. ~ Temp_class) +                                      # produces one plot per temperature treatment
theme_bw() +
scale_y_log10()                                                   # plot data with log10 scaled y axis
# model structure using log10 SMR and mass for fish at 18C only
SMR18_mod<-lmer(log10(SMR) ~ log_mass + (1 |ID_fish), # random slopes by month, random intercepts by ID_fish
data=ds18, REML = T)
summary(SMR18_mod)                                               # generate model output
plot(SMR18_mod)                                                  # plot model residuals
ranova(SMR18_mod)                                                # anova-like test shows insignificant random slopes
SMR18_mod_1<-lmer(log10(SMR) ~ log_mass + (1 |ID_fish),          # random slopes term removed
data=ds18, REML = T)
summary(SMR18_mod_1)                                             # generate model output
plot(SMR18_mod_1)                                                # plot model residuals
ranova(SMR18_mod_1)                                              # anova-like test shows insignificant random intercepts, but retain in model for testing
# model structure using log10 SMR and mass for fish at 23C only
SMR23_mod<-lmer(log10(SMR) ~ log_mass + (1 + Month_int|ID_fish), # random slopes by month, random intercepts by ID_fish
data=ds23, REML=T)
summary(SMR23_mod)                                               # generate model output
plot(SMR23_mod)                                                  # plot model residuals
ranova(SMR23_mod)                                                # anova-like test shows insignificant random slopes
SMR23_mod_1<-lmer(log10(SMR) ~ log_mass + (1 |ID_fish),          # random slopes term removed
data=ds23, REML=T)
summary(SMR23_mod_1)                                             # generate model output
plot(SMR23_mod_1)                                                # plot model residuals
ranova(SMR23_mod_1)                                              # anova-like test shows insignificant random intercepts, but retain in model for testing
# model using log10 SMR and the interaction of log10 mass and temperature treatment
SMR_mod <- lmer(log10(SMR) ~ log_mass*as.factor(Temp_class) + Sex + Sex*as.factor(Temp_class) + Sex*as.factor(Temp_class)*log_mass + Density + (1|ID_fish),
data=ds1, REML=T)
plot(SMR_mod)                                             # generate model output
summary(SMR_mod)                                          # plot model residuals
ranova(SMR_mod)                                           # anova-like test for significance of model components
# model using log10 SMR and the interaction of log10 mass and temperature treatment with test of random slopes by month
SMR_mod_month <- lmer(log10(SMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (1 + Month_int|ID_fish),
data=ds1, REML=T)
plot(SMR_mod_month)                                             # generate model output
summary(SMR_mod_month)                                          # plot model residuals
ranova(SMR_mod_month)                                           # anova-like test for significance of model components
# model with random slopes by temp treatment
SMR_mod_trt <- lmer(log10(SMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (0+Temp_class|ID_fish),
data=ds1, REML=T)
plot(SMR_mod_trt)                                             # generate model output
summary(SMR_mod_trt)                                          # plot model residuals
ranova(SMR_mod_trt)                                           # anova-like test for significance of model components
# model with random intercepts by temp treatment
SMR_mod_trtint <- lmer(log10(SMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (1|Temp_class),
data=ds1, REML=T)
plot(SMR_mod_trtint)                                             # generate model output
summary(SMR_mod_trtint)                                          # plot model residuals
ranova(SMR_mod_trtint)                                           # anova-like test for significance of model components
# test sex terms for model inclusion
SMR_mod_sex <- lmer(log10(SMR) ~ Sex*as.factor(Temp_class) + Sex*as.factor(Temp_class)*log_mass + (1 |ID_fish),
data=ds1, REML=T)
plot(SMR_mod_sex)
summary(SMR_mod_sex)
ranova(SMR_mod_sex)
pred_SMR <- ggpredict(SMR_mod, terms = c("log_mass", "Temp_class"))
ggplot() +
geom_errorbar(data = pred_SMR, aes(x=x, ymin = conf.low, ymax = conf.high, color = group, group = group), width = 0.2) +   # add error bars showing 95% confidence intervals
geom_point(data = pred_SMR, aes(x = x, y = predicted, color = group, group = group)) +
geom_line(data = pred_SMR, aes(x = x, y = predicted, color = group, group = group)) +
labs(x = "log_mass", y = "Predicted SMR", color = "Temp_class") +
theme_bw() +
scale_color_manual(values = c("#78B7C5", "#F21A00")) +
scale_y_log10()
anova(SMR_mod, type = "3")
z_SMR<-augment(SMR_mod)                             # get variables and fitted values from model
head(z_SMR)
z_SMR <- z_SMR %>%
mutate(
pwr.fitted = 10^(.fitted)
)
##### check assumptions: plot all residual values against the fitted
ggplot(z_SMR, aes(x = .fitted, y = .resid)) +   # same plot as before
geom_point(size = 2)
ggplot(z_SMR, aes(x = log_mass, y = SMR, group = ID_fish)) +
geom_line(aes(y = pwr.fitted, color = `as.factor(Temp_class)`),      # note this will look odd if there are additional fixed effects
alpha = 0.6) +
theme_classic() +
scale_color_manual(values  = c("#78B7C5", "#F21A00")) +
scale_y_log10()+
labs(x = expression(log[10]~(mass~(g))), y = expression(Fitted~SMR~(mg~O[2]~h^-1)), color = expression("Temperature ("*degree*C*")"))
# model using log10 RMR and the interaction of log10 mass and temperature treatment
RMR_mod <- lmer(log10(RMR) ~ log_mass*as.factor(Temp_class) + Sex + Sex*as.factor(Temp_class) + Sex*as.factor(Temp_class)*log_mass + Density + (1 |ID_fish),
data=ds1, REML=T)
plot(RMR_mod)
summary(RMR_mod)
ranova(RMR_mod)
# model using log10 SMR and the interaction of log10 mass and temperature treatment with test of random slopes by month
RMR_mod_month <- lmer(log10(RMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (1 + Month_int|ID_fish),
data=ds1, REML=T)
plot(RMR_mod_month)                                             # generate model output
summary(RMR_mod_month)                                          # plot model residuals
ranova(RMR_mod_month)                                           # anova-like test for significance of model components
# model with random intercepts by temp treatment
RMR_mod_trtint <- lmer(log10(RMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (1|Temp_class),
data=ds1, REML=T)
plot(RMR_mod_trtint)
summary(RMR_mod_trtint)
ranova(RMR_mod_trtint)
# model with random slopes by temp treatment
RMR_mod_trt <- lmer(log10(RMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (0 + Temp_class|ID_fish),
data=ds1, REML=T)
plot(RMR_mod_trt)
summary(RMR_mod_trt)
ranova(RMR_mod_trt)
# test sex terms for model inclusion
RMR_mod_sex <- lmer(log10(RMR) ~ Sex*as.factor(Temp_class) + Sex*as.factor(Temp_class)*log_mass + (1 |ID_fish),
data=ds1, REML=T)
plot(RMR_mod_sex)
summary(RMR_mod_sex)
ranova(RMR_mod_sex)
# plot RMR vs. log mass mean predicted level
pred_RMR <- ggpredict(RMR_mod, terms = c("log_mass", "Temp_class"))
ggplot() +
geom_errorbar(data = pred_RMR, aes(x=x, ymin = conf.low, ymax = conf.high, color = group, group = group), width = 0.2) +   # add error bars showing 95% confidence intervals
geom_point(data = pred_RMR, aes(x = x, y = predicted, color = group, group = group)) +
geom_line(data = pred_RMR, aes(x = x, y = predicted, color = group, group = group)) +
labs(x = "log_mass_centre", y = "Predicted RMR", color = "Temp_class") +
theme_bw() +
scale_color_manual(values = c("#78B7C5", "#F21A00")) +
scale_y_log10()
# plot the raw data as a cloud around the predictions
ggplot() +
geom_point(data = ds1, aes(x = log_mass, y = RMR, group = factor(Temp_class), color = factor(Temp_class)),
alpha = 0.3, position = position_jitter(width = 0.1)) +
geom_point(data = pred_RMR, aes(x = x, y = predicted, color = group, group = group),
size = 3) +
geom_line(data = pred_RMR, aes(x = x, y = predicted, color = group, group = group),
size = 2) +
labs(x = "log_mass_centre", y = "Predicted RMR", color = "Temp_class") +
theme_bw() +
scale_color_manual(values = c("#78B7C5", "#F21A00")) +
scale_y_log10()
# F test on interaction effect
anova(RMR_mod, type = "3")
# generate fitted data
z_RMR<-augment(RMR_mod)                                            # get variables and fitted values from model
head(z_RMR)
z_RMR <- z_RMR %>%
mutate(
pwr.fitted = 10^(.fitted)
)
# check assumptions: plot all residual values against the fitted
ggplot(z_RMR, aes(x = .fitted, y = .resid)) +                      # same plot as before
geom_point(size = 2)
ggplot(z_RMR, aes(x = log_mass, y = RMR, group = ID_fish)) +
geom_line(aes(y = pwr.fitted, color = `as.factor(Temp_class)`),
alpha = 0.6) +
theme_bw() +
scale_y_log10() +
scale_color_manual(values  = c("#78B7C5", "#F21A00"))
# model using log10 MMR and the interaction of log10 mass and temperature treatment
MMR_mod <- lmer(log10(MMR) ~ 0 + log_mass*as.factor(Temp_class) + as.factor(Sex) + Density + (1 |ID_fish),
data=ds1, REML=T)
plot(MMR_mod)
summary(MMR_mod)
ranova(MMR_mod)
# model using log10 SMR and the interaction of log10 mass and temperature treatment with test of random slopes by month
MMR_mod_month <- lmer(log10(MMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (1 + Month_int|ID_fish),
data=ds1, REML=T)
plot(MMR_mod_month)                                             # generate model output
summary(MMR_mod_month)                                          # plot model residuals
ranova(MMR_mod_month)                                           # anova-like test for significance of model components
# model with random intercepts by temp treatment
MMR_mod_trtint <- lmer(log10(MMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (1|Temp_class),
data=ds1, REML=T)
plot(MMR_mod_trtint)
summary(MMR_mod_trtint)
ranova(MMR_mod_trtint)
# model with random slopes by temp treatment
MMR_mod_trt <- lmer(log10(MMR) ~ log_mass*as.factor(Temp_class) + Sex + Density + (0 + Temp_class|ID_fish),
data=ds1, REML=T)
plot(MMR_mod_trt)
summary(MMR_mod_trt)
ranova(MMR_mod_trt)
# test sex terms for model inclusion
MMR_mod_sex <- lmer(log10(MMR) ~ 0 + as.factor(Sex):as.factor(Temp_class) + as.factor(Sex):as.factor(Temp_class):log_mass + Density + (1 |ID_fish),
data=ds1, REML=T)
plot(MMR_mod_sex)
summary(MMR_mod_sex)
# plot MMR vs. log mass mean predicted level
pred_MMR <- ggpredict(MMR_mod, terms = c("log_mass", "Temp_class"))
RN <- bf(mass1 ~ 0 + Sex:Temp_class + Sex:Temp_class:Month_centred_factor + Density + (1 + Month_centred |a| ID_fish)) +
bf(SMR1  ~ 0 + Sex:Temp_class + Sex:Temp_class:log_mass_centre + Density + (1 |a| ID_fish)) +
bf(RMR1  ~ 0 + Sex:Temp_class + Sex:Temp_class:log_mass_centre + Density + (1 |a| ID_fish)) +
bf(MMR1  ~ 0 + Sex:Temp_class + Sex:Temp_class:log_mass_centre + Density + (1 |a| ID_fish)) +
set_rescor(T)
prior1 <- c(set_prior("normal(0,2)", class = "b", resp = c("mass1", "SMR1", "RMR1","MMR1")),
set_prior("cauchy(0,2)", class = "sd", resp = c("mass1", "SMR1", "RMR1","MMR1")),
set_prior("lkj(2)", class = "cor"))
fit0 <- brm(formula = RN,
data = ds1,
prior = prior1,
seed = 42, warmup = 500, iter = 2000, chains = 4, cores = 4,
control=list(adapt_delta=0.97, max_treedepth = 15),
save_ranef = T
)
print(fit0, digits = 3)
plot(fit0)
conditional_effects(fit0)
citation?
